CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(300) NOT NULL,
    CONSTRAINT pk_category_request PRIMARY KEY(id),
    CONSTRAINT CATEGORY_UQ UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR(3000) NOT NULL,
    category BIGINT NOT NULL,
    created_on TIMESTAMP NOT NULL,
    description VARCHAR(5000),
    event_date TIMESTAMP NOT NULL,
    initiator BIGINT,
    lat FLOAT4,
    lon FLOAT4,
    paid BOOLEAN NOT NULL,
    participant_limit INTEGER NOT NULL,
    current_participants INTEGER DEFAULT 0,
    published_on TIMESTAMP,
    request_moderation BOOLEAN,
    state VARCHAR(50),
    title VARCHAR(1000),
    CONSTRAINT pk_events_request PRIMARY KEY(id),
    CONSTRAINT EVENT_REQ_CATEGORY FOREIGN KEY (category) REFERENCES category(id) ON DELETE CASCADE,
    CONSTRAINT EVENT_REQ_INITIATOR FOREIGN KEY (initiator) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    pinned BOOLEAN NOT NULL,
    title VARCHAR(1000) NOT NULL,
    CONSTRAINT pk_compilations PRIMARY KEY(id)
);

CREATE TABLE IF NOT EXISTS event_compilations (
    event_id BIGINT NOT NULL,
    compilation_id BIGINT NOT NULL,
    CONSTRAINT EVENT_REQ_COMPILATION FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT COMPILATIONS_REQ_EVENT FOREIGN KEY (compilation_id) REFERENCES compilations(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS participation_request (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    eventEnt BIGINT NOT NULL,
    created TIMESTAMP,
    requester BIGINT NOT NULL,
    status VARCHAR(50),

    CONSTRAINT pk_participation PRIMARY KEY(id),
    CONSTRAINT REQUEST_PART_EVENT FOREIGN KEY(eventEnt) REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT REQUEST_USER_ID FOREIGN KEY (requester) REFERENCES users(id) ON DELETE CASCADE
);

